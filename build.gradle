plugins {
    id 'java' // Applies the Java plugin for compilation, testing, etc.
    id 'jacoco' // Applies JaCoCo plugin for code coverage reports
    id 'com.github.kt3k.coveralls' version '2.12.2' // Plugin to upload JaCoCo report to Coveralls
    id 'org.sonarqube' version '5.0.0.4638' // Plugin for SonarQube/SonarCloud analysis
    id 'com.github.johnrengelman.shadow' version '8.1.1' // Plugin to create a shaded (fat) JAR
    id 'info.solidsoft.pitest' version '1.15.0' // Plugin for Mutation Testing (PIT)
}

// Project coordinates (similar to groupId, artifactId, version)
// 'name' is typically inferred from the project directory name, but can be set explicitly if needed.
group = 'com.labs.dm'
version = '0.0.9-SNAPSHOT'

// Define repositories where dependencies are found
repositories {
    mavenCentral() // Corresponds to Maven's central repository
}

// Configure Java compilation compatibility
java {
    // Using Java 17 as specified in the maven-compiler-plugin config, which overrides the property
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Define dependencies (similar to <dependencies> in Maven)
dependencies {
    // Test dependencies (scope 'test')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'

    // You might need to explicitly add slf4j-nop for JUnit 4 if you encounter issues
    testImplementation 'org.slf4j:slf4j-nop:2.0.12' // Updated to latest version
}

// Configure the standard JAR task (generated by the 'java' plugin)
jar {
    // Corresponds to <finalName>sudoku-solver</finalName> for the standard jar
    // archiveBaseName = 'sudoku-solver' // Optional: name part before version

    // Corresponds to <manifest> configuration in maven-jar-plugin
    manifest {
        attributes 'Main-Class': 'com.labs.dm.sudoku.solver.MainCLI'
        attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
    }
}

// Configure the Shadow (Fat) JAR task (generated by the 'shadow' plugin)
// This task creates the executable JAR with bundled dependencies
shadowJar {
    // Corresponds to <finalName>sudoku-solver</finalName>
    archiveBaseName = 'sudoku-solver' // Sets the base name for the shaded jar

    // Sets the main class for the executable shaded jar
    manifest {
        attributes 'Main-Class': 'com.labs.dm.sudoku.solver.MainCLI'
        // Not needed for shaded jars
        // attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
    }

    // Corresponds to <filters> in maven-shade-plugin
    filters {
        filter {
            include '**' // Apply filter to all files/artifacts
            exclude 'META-INF/maven/**' // Exclude Maven metadata
        }
    }

    // You might want to add a classifier to distinguish it from the regular jar
    // archiveClassifier = 'all' // Example: sudoku-solver-0.0.9-SNAPSHOT-all.jar
}

// Configure the JaCoCo plugin
// The default jacocoTestReport task is usually sufficient and runs after tests.
// The 'coveralls' plugin automatically uses the output of this task.
jacocoTestReport {
    // You can add configurations here if needed,
    // e.g., source/execution data locations if non-standard
}

// Configure the Coveralls plugin
// This plugin automatically uploads the JaCoCo report
coveralls {
    // Token from pom.xml
    repoToken = 'UfOQCr8rB9p8e1X4ly5U5zbeumr35DBvt'
}

// Configure the SonarQube plugin
sonarqube {
    properties {
        // Properties from your pom.xml <properties> section
        property "sonar.projectKey", "danielmroczka_sudoku-solver"
        property "sonar.organization", "danielmroczka"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "0c70d93f81a82123cb34bd2ca997241324d7adcf"
    }
}

// Configure the PIT Mutation Testing plugin
pitest {
    // Corresponds to <targetClasses>
    targetClasses = ['com.labs.dm.sudoku.solver*']

    // Corresponds to <targetTests>
    targetTests = ['com.labs.dm.sudoku.solver*']

    // Corresponds to <excludedClasses>
    excludedClasses = ['com.labs.dm.sudoku.solver.alg.ValidationTest',
                       'com.labs.dm.sudoku.solver.alg.PerformanceTest']

    // You can specify other options if needed, e.g.:
    // threads = 4 // Number of threads to use
    // timeoutFactor = 1.5 // Timeout factor for mutations
    // verbose = true // Enable verbose logging
}


// Optional: Task to clean built artifacts (already provided by the 'base' plugin applied by 'java')
// clean {
//     delete rootProject.buildDir
// }

// Optional: Define default tasks to run when no task is specified
defaultTasks 'clean', 'build', 'jacocoTestReport', 'shadowJar' // Example: clean, build, run coverage, build fat jar

// Note: The 'cobertura-maven-plugin' was not translated as JaCoCo is present and more standard in Gradle.
// Note: The 'check' goal config for Cobertura was not translated - JaCoCo has similar capabilities or
//       you would configure the 'check' task in Gradle based on JaCoCo thresholds.
// Note: The SCM section is typically not part of the build.gradle unless a specific plugin uses it.
